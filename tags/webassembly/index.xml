<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>webassembly on seb.deleuze.fr</title>
        <link>https://seb.deleuze.fr/tags/webassembly/</link>
        <description>Recent content in webassembly on seb.deleuze.fr</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Tue, 26 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://seb.deleuze.fr/tags/webassembly/index.xml" rel="self" type="application/rss+xml" />
        <item>
            <title>The terraforming of the WebAssembly landscape</title>
            <link>/the-terraforming-of-webassembly-landscape/</link>
            <pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate>
            
            <guid>/the-terraforming-of-webassembly-landscape/</guid>
            <description>Last week, I took a few days off to go to Barcelona to attend Wasm I/O 2024 conference. Like last year, the conference was amazing and was still more an event for companies and individuals building the Wasm ecosystem rather than using it, but my feeling is that we are approaching a point where the technology reaches the wider crowd of application and library developers. While WebAssembly can potentially be used with any language, any hardware, for any workload, I would like to share the trends and patterns I see in the ecosystem based on the various talks I saw and discussions I had at the conference.</description>
        </item>
        
        <item>
            <title>Talking Kotlin: Kotlin/WASM in The Browser and Beyond</title>
            <link>https://talkingkotlin.com/Kotlin-for-WebAssembly-in-the-browser-and-beyond/</link>
            <pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate>
            
            <guid>https://talkingkotlin.com/Kotlin-for-WebAssembly-in-the-browser-and-beyond/</guid>
            <description></description>
        </item>
        
        <item>
            <title>Introducing Kotlin/Wasm</title>
            <link>/introducing-kotlin-wasm/</link>
            <pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate>
            
            <guid>/introducing-kotlin-wasm/</guid>
            <description>This blog post is a refined transcription of the presentation Zalim Bashorov and I gave at Wasm I/O 2023 to introduce Kotlin/Wasm. The recording is also available on YouTube.
Intro Link to heading Zalim Hi, everyone! I’m Zalim. I’m writing Kotlin in Kotlin at JetBrains and leading Kotlin/Wasm. We are going to have a quick journey around Kotlin/Wasm. We will see what the possibilities there are and also have a look at the inside.</description>
        </item>
        
        <item>
            <title>The huge potential of Kotlin/Wasm</title>
            <link>/the-huge-potential-of-kotlin-wasm/</link>
            <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
            
            <guid>/the-huge-potential-of-kotlin-wasm/</guid>
            <description>Last week, a preview release of Kotlin/Wasm was announced as part of Kotlin 1.8.20-Beta. For me who has been nudging the Kotlin team to work on WebAssembly support since June 2016, that&amp;rsquo;s a huge step forward even if providing WebAssembly first class support for Kotlin will be a long journey.
I also decided recently to contribute actively by creating KoWasm, an experimental side project intended to provide WebAssembly Component Model and WASI support for Kotlin/Wasm, with the goal to see those features later supported out of the box.</description>
        </item>
        
        <item>
            <title>WebAssembly impact on programming languages</title>
            <link>/webassembly-impact-on-programming-languages/</link>
            <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>/webassembly-impact-on-programming-languages/</guid>
            <description>First some context: WebAssembly Component Model (WIT) is maturing in order to standardize reusable components. When ready, WIT components will likely be published in a repository (like npm or Maven Central but for Wasm) in a polyglot fashion targeting any language that supports Wasm.
Wasi (the Posix of WebAssembly that allows to use it outside of the browser) is currently rebased on top of WIT (tentatively called Wasi Preview 2). With Wasi, Wasm could become a major way to deploy workloads on Edge and Cloud platforms.</description>
        </item>
        
        <item>
            <title>WebAssembly Developper Experience presentation</title>
            <link>http://seb.deleuze.fr/wasm-devxp/</link>
            <pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate>
            
            <guid>http://seb.deleuze.fr/wasm-devxp/</guid>
            <description></description>
        </item>
        
        <item>
            <title>Bootiful podcast on GraalVM, AOT and WebAssembly </title>
            <link>https://bootifulpodcast.podbean.com/e/spring-framework-contributor-sebastien-deleuze-on-graalvm-aot-project-leyden-and-webassembly/</link>
            <pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate>
            
            <guid>https://bootifulpodcast.podbean.com/e/spring-framework-contributor-sebastien-deleuze-on-graalvm-aot-project-leyden-and-webassembly/</guid>
            <description></description>
        </item>
        
        <item>
            <title>My call for Kotlin as a major frontend language</title>
            <link>/kotlin-major-frontend-language/</link>
            <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
            
            <guid>/kotlin-major-frontend-language/</guid>
            <description>I try to push for quite a long time for first class support for WebAssembly in Kotlin because I really believe that frontend development is a domain where Kotlin can be as strong as in mobile, and because this is something that would also help to increase even more the adoption on server-side.
I truly appreciate all the work already done by Kotlin/JS and Kotlin/Native teams. The dead code elimination tool and the initial WebAssembly support in Kotlin/Native are important steps in the right direction.</description>
        </item>
        
    </channel>
</rss>
